# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humandetection/RunDetectionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RunDetectionGoal(genpy.Message):
  _md5sum = "87faf4ffe0556508a3e10352e3144b54"
  _type = "humandetection/RunDetectionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# service RunDetection
uint16 frameRate
uint16 temporalSlidingWindowSize
float32 detectorFrameRatio
uint16 maxTrackNumber
uint16 maxTemplateSize
uint16 expertThreshold
float32 detectionRescalingFactor
float32 alphaDistribution
float32 histogramUpdateRate
uint16 numberOfParticles
uint16 framesBeforeTrackDeath
uint32 frameHistory
string classifiers
float32 templateMatchingThreshold
float32 disparityThreshold
"""
  __slots__ = ['frameRate','temporalSlidingWindowSize','detectorFrameRatio','maxTrackNumber','maxTemplateSize','expertThreshold','detectionRescalingFactor','alphaDistribution','histogramUpdateRate','numberOfParticles','framesBeforeTrackDeath','frameHistory','classifiers','templateMatchingThreshold','disparityThreshold']
  _slot_types = ['uint16','uint16','float32','uint16','uint16','uint16','float32','float32','float32','uint16','uint16','uint32','string','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frameRate,temporalSlidingWindowSize,detectorFrameRatio,maxTrackNumber,maxTemplateSize,expertThreshold,detectionRescalingFactor,alphaDistribution,histogramUpdateRate,numberOfParticles,framesBeforeTrackDeath,frameHistory,classifiers,templateMatchingThreshold,disparityThreshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RunDetectionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frameRate is None:
        self.frameRate = 0
      if self.temporalSlidingWindowSize is None:
        self.temporalSlidingWindowSize = 0
      if self.detectorFrameRatio is None:
        self.detectorFrameRatio = 0.
      if self.maxTrackNumber is None:
        self.maxTrackNumber = 0
      if self.maxTemplateSize is None:
        self.maxTemplateSize = 0
      if self.expertThreshold is None:
        self.expertThreshold = 0
      if self.detectionRescalingFactor is None:
        self.detectionRescalingFactor = 0.
      if self.alphaDistribution is None:
        self.alphaDistribution = 0.
      if self.histogramUpdateRate is None:
        self.histogramUpdateRate = 0.
      if self.numberOfParticles is None:
        self.numberOfParticles = 0
      if self.framesBeforeTrackDeath is None:
        self.framesBeforeTrackDeath = 0
      if self.frameHistory is None:
        self.frameHistory = 0
      if self.classifiers is None:
        self.classifiers = ''
      if self.templateMatchingThreshold is None:
        self.templateMatchingThreshold = 0.
      if self.disparityThreshold is None:
        self.disparityThreshold = 0.
    else:
      self.frameRate = 0
      self.temporalSlidingWindowSize = 0
      self.detectorFrameRatio = 0.
      self.maxTrackNumber = 0
      self.maxTemplateSize = 0
      self.expertThreshold = 0
      self.detectionRescalingFactor = 0.
      self.alphaDistribution = 0.
      self.histogramUpdateRate = 0.
      self.numberOfParticles = 0
      self.framesBeforeTrackDeath = 0
      self.frameHistory = 0
      self.classifiers = ''
      self.templateMatchingThreshold = 0.
      self.disparityThreshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Hf3H3f2HI.pack(_x.frameRate, _x.temporalSlidingWindowSize, _x.detectorFrameRatio, _x.maxTrackNumber, _x.maxTemplateSize, _x.expertThreshold, _x.detectionRescalingFactor, _x.alphaDistribution, _x.histogramUpdateRate, _x.numberOfParticles, _x.framesBeforeTrackDeath, _x.frameHistory))
      _x = self.classifiers
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.templateMatchingThreshold, _x.disparityThreshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.frameRate, _x.temporalSlidingWindowSize, _x.detectorFrameRatio, _x.maxTrackNumber, _x.maxTemplateSize, _x.expertThreshold, _x.detectionRescalingFactor, _x.alphaDistribution, _x.histogramUpdateRate, _x.numberOfParticles, _x.framesBeforeTrackDeath, _x.frameHistory,) = _struct_2Hf3H3f2HI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.classifiers = str[start:end].decode('utf-8')
      else:
        self.classifiers = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.templateMatchingThreshold, _x.disparityThreshold,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Hf3H3f2HI.pack(_x.frameRate, _x.temporalSlidingWindowSize, _x.detectorFrameRatio, _x.maxTrackNumber, _x.maxTemplateSize, _x.expertThreshold, _x.detectionRescalingFactor, _x.alphaDistribution, _x.histogramUpdateRate, _x.numberOfParticles, _x.framesBeforeTrackDeath, _x.frameHistory))
      _x = self.classifiers
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.templateMatchingThreshold, _x.disparityThreshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.frameRate, _x.temporalSlidingWindowSize, _x.detectorFrameRatio, _x.maxTrackNumber, _x.maxTemplateSize, _x.expertThreshold, _x.detectionRescalingFactor, _x.alphaDistribution, _x.histogramUpdateRate, _x.numberOfParticles, _x.framesBeforeTrackDeath, _x.frameHistory,) = _struct_2Hf3H3f2HI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.classifiers = str[start:end].decode('utf-8')
      else:
        self.classifiers = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.templateMatchingThreshold, _x.disparityThreshold,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_2Hf3H3f2HI = struct.Struct("<2Hf3H3f2HI")
