# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humandetection/detectionH_Detections.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import humandetection.msg

class detectionH_Detections(genpy.Message):
  _md5sum = "a9c5750cb5d756220fa928bf7642c8f0"
  _type = "humandetection/detectionH_Detections"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# IDL struct ::detectionH::Detections
detectionH_Frame[] frame

================================================================================
MSG: humandetection/detectionH_Frame
# IDL struct ::detectionH::Frame
int32 frameNumber
detectionH_timestamp time
detectionH_people[] people

================================================================================
MSG: humandetection/detectionH_timestamp
# IDL struct ::detectionH::timestamp
uint32 sec
uint32 usec

================================================================================
MSG: humandetection/detectionH_people
# IDL struct ::detectionH::people
int32 ID
detectionH_world_coordinates coordinates

================================================================================
MSG: humandetection/detectionH_world_coordinates
# IDL struct ::detectionH::world_coordinates
float32 x
float32 y
float32 z
float32 azimuth
"""
  __slots__ = ['frame']
  _slot_types = ['humandetection/detectionH_Frame[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detectionH_Detections, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame is None:
        self.frame = []
    else:
      self.frame = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.frame)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame:
        buff.write(_struct_i.pack(val1.frameNumber))
        _v1 = val1.time
        _x = _v1
        buff.write(_struct_2I.pack(_x.sec, _x.usec))
        length = len(val1.people)
        buff.write(_struct_I.pack(length))
        for val2 in val1.people:
          buff.write(_struct_i.pack(val2.ID))
          _v2 = val2.coordinates
          _x = _v2
          buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.frame is None:
        self.frame = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame = []
      for i in range(0, length):
        val1 = humandetection.msg.detectionH_Frame()
        start = end
        end += 4
        (val1.frameNumber,) = _struct_i.unpack(str[start:end])
        _v3 = val1.time
        _x = _v3
        start = end
        end += 8
        (_x.sec, _x.usec,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.people = []
        for i in range(0, length):
          val2 = humandetection.msg.detectionH_people()
          start = end
          end += 4
          (val2.ID,) = _struct_i.unpack(str[start:end])
          _v4 = val2.coordinates
          _x = _v4
          start = end
          end += 16
          (_x.x, _x.y, _x.z, _x.azimuth,) = _struct_4f.unpack(str[start:end])
          val1.people.append(val2)
        self.frame.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.frame)
      buff.write(_struct_I.pack(length))
      for val1 in self.frame:
        buff.write(_struct_i.pack(val1.frameNumber))
        _v5 = val1.time
        _x = _v5
        buff.write(_struct_2I.pack(_x.sec, _x.usec))
        length = len(val1.people)
        buff.write(_struct_I.pack(length))
        for val2 in val1.people:
          buff.write(_struct_i.pack(val2.ID))
          _v6 = val2.coordinates
          _x = _v6
          buff.write(_struct_4f.pack(_x.x, _x.y, _x.z, _x.azimuth))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.frame is None:
        self.frame = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frame = []
      for i in range(0, length):
        val1 = humandetection.msg.detectionH_Frame()
        start = end
        end += 4
        (val1.frameNumber,) = _struct_i.unpack(str[start:end])
        _v7 = val1.time
        _x = _v7
        start = end
        end += 8
        (_x.sec, _x.usec,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.people = []
        for i in range(0, length):
          val2 = humandetection.msg.detectionH_people()
          start = end
          end += 4
          (val2.ID,) = _struct_i.unpack(str[start:end])
          _v8 = val2.coordinates
          _x = _v8
          start = end
          end += 16
          (_x.x, _x.y, _x.z, _x.azimuth,) = _struct_4f.unpack(str[start:end])
          val1.people.append(val2)
        self.frame.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4f = struct.Struct("<4f")
_struct_2I = struct.Struct("<2I")
