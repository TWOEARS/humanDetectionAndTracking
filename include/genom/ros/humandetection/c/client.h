/* --- Generated by genom 2.99.27. Do not edit -------------------------- */

#ifndef H_HUMANDETECTION_CLIENT
#define H_HUMANDETECTION_CLIENT


#include "genom3/c/client.h"


/* --- Interface types ----------------------------------------------------- */





#ifndef _genom_state_stats_c_type
# define _genom_state_stats_c_type
typedef struct genom_state_stats genom_state_stats;
#endif /* _genom_state_stats_c_type */

#ifndef _genom_state_stats_definition_c_type
# define _genom_state_stats_definition_c_type
struct genom_state_stats {
 float last;
 float max;
 float avg;
};
#endif /* _genom_state_stats_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_rusage_c_type
# define _genom_state_rusage_c_type
typedef struct genom_state_rusage genom_state_rusage;
#endif /* _genom_state_rusage_c_type */

#ifndef _genom_state_rusage_definition_c_type
# define _genom_state_rusage_definition_c_type
struct genom_state_rusage {
 uint32_t cycles;
 genom_state_stats timings;
 genom_state_stats load;
};
#endif /* _genom_state_rusage_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_activity_c_type
# define _genom_state_activity_c_type
typedef struct genom_state_activity genom_state_activity;
#endif /* _genom_state_activity_c_type */

#ifndef _genom_state_activity_definition_c_type
# define _genom_state_activity_definition_c_type
struct genom_state_activity {
 uint32_t id;
 char name[64];
};
#endif /* _genom_state_activity_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_task_c_type
# define _genom_state_task_c_type
typedef struct genom_state_task genom_state_task;
#endif /* _genom_state_task_c_type */

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#ifndef _genom_state_task_definition_c_type
# define _genom_state_task_definition_c_type
struct genom_state_task {
 char name[64];
 genom_state_rusage rusage;
 sequence_genom_state_activity activity;
};
#endif /* _genom_state_task_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */




#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_component_c_type
# define _genom_state_component_c_type
typedef struct genom_state_component genom_state_component;
#endif /* _genom_state_component_c_type */

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */

#ifndef _genom_state_component_definition_c_type
# define _genom_state_component_definition_c_type
struct genom_state_component {
 sequence_genom_state_task task;
 char digest[33];
 char date[31];
 char version[32];
};
#endif /* _genom_state_component_definition_c_type */


#include <stdint.h>

#ifndef _detectionH_timestamp_c_type
# define _detectionH_timestamp_c_type
typedef struct detectionH_timestamp detectionH_timestamp;
#endif /* _detectionH_timestamp_c_type */

#ifndef _detectionH_timestamp_definition_c_type
# define _detectionH_timestamp_definition_c_type
struct detectionH_timestamp {
 uint32_t sec;
 uint32_t usec;
};
#endif /* _detectionH_timestamp_definition_c_type */


#ifndef _detectionH_world_coordinates_c_type
# define _detectionH_world_coordinates_c_type
typedef struct detectionH_world_coordinates detectionH_world_coordinates;
#endif /* _detectionH_world_coordinates_c_type */

#ifndef _detectionH_world_coordinates_definition_c_type
# define _detectionH_world_coordinates_definition_c_type
struct detectionH_world_coordinates {
 float x;
 float y;
 float z;
 float azimuth;
};
#endif /* _detectionH_world_coordinates_definition_c_type */

#include <stdint.h>

#ifndef _detectionH_people_c_type
# define _detectionH_people_c_type
typedef struct detectionH_people detectionH_people;
#endif /* _detectionH_people_c_type */

#ifndef _detectionH_people_definition_c_type
# define _detectionH_people_definition_c_type
struct detectionH_people {
 int32_t ID;
 detectionH_world_coordinates coordinates;
};
#endif /* _detectionH_people_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_detectionH_people_c_type
# define _sequence_detectionH_people_c_type
typedef struct sequence_detectionH_people {
  uint32_t _maximum, _length;
  detectionH_people (*_buffer);
  void (*_release)(void *_buffer);
} sequence_detectionH_people;
#endif /* _sequence_detectionH_people_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _detectionH_Frame_c_type
# define _detectionH_Frame_c_type
typedef struct detectionH_Frame detectionH_Frame;
#endif /* _detectionH_Frame_c_type */

#ifndef _sequence_detectionH_people_c_type
# define _sequence_detectionH_people_c_type
typedef struct sequence_detectionH_people {
  uint32_t _maximum, _length;
  detectionH_people (*_buffer);
  void (*_release)(void *_buffer);
} sequence_detectionH_people;
#endif /* _sequence_detectionH_people_c_type */

#ifndef _detectionH_Frame_definition_c_type
# define _detectionH_Frame_definition_c_type
struct detectionH_Frame {
 int32_t frameNumber;
 detectionH_timestamp time;
 sequence_detectionH_people people;
};
#endif /* _detectionH_Frame_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_detectionH_Frame_c_type
# define _sequence_detectionH_Frame_c_type
typedef struct sequence_detectionH_Frame {
  uint32_t _maximum, _length;
  detectionH_Frame (*_buffer);
  void (*_release)(void *_buffer);
} sequence_detectionH_Frame;
#endif /* _sequence_detectionH_Frame_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _detectionH_Detections_c_type
# define _detectionH_Detections_c_type
typedef struct detectionH_Detections detectionH_Detections;
#endif /* _detectionH_Detections_c_type */

#ifndef _sequence_detectionH_Frame_c_type
# define _sequence_detectionH_Frame_c_type
typedef struct sequence_detectionH_Frame {
  uint32_t _maximum, _length;
  detectionH_Frame (*_buffer);
  void (*_release)(void *_buffer);
} sequence_detectionH_Frame;
#endif /* _sequence_detectionH_Frame_c_type */

#ifndef _detectionH_Detections_definition_c_type
# define _detectionH_Detections_definition_c_type
struct detectionH_Detections {
 sequence_detectionH_Frame frame;
};
#endif /* _detectionH_Detections_definition_c_type */


#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_string_c_type
# define _sequence_string_c_type
typedef struct sequence_string {
  uint32_t _maximum, _length;
  char *(*_buffer);
  void (*_release)(void *_buffer);
} sequence_string;
#endif /* _sequence_string_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _humandetection_ClassifiersLoaded_c_type
# define _humandetection_ClassifiersLoaded_c_type
typedef struct humandetection_ClassifiersLoaded humandetection_ClassifiersLoaded;
#endif /* _humandetection_ClassifiersLoaded_c_type */

#ifndef _sequence_string_c_type
# define _sequence_string_c_type
typedef struct sequence_string {
  uint32_t _maximum, _length;
  char *(*_buffer);
  void (*_release)(void *_buffer);
} sequence_string;
#endif /* _sequence_string_c_type */

#ifndef _humandetection_ClassifiersLoaded_definition_c_type
# define _humandetection_ClassifiersLoaded_definition_c_type
struct humandetection_ClassifiersLoaded {
 sequence_string classifiers;
 uint32_t loaded;
};
#endif /* _humandetection_ClassifiersLoaded_definition_c_type */

#include <stdint.h>

#ifndef _detectionH_std_msgs__Header_c_type
# define _detectionH_std_msgs__Header_c_type
typedef struct detectionH_std_msgs__Header detectionH_std_msgs__Header;
#endif /* _detectionH_std_msgs__Header_c_type */

#ifndef _detectionH_std_msgs__Header_definition_c_type
# define _detectionH_std_msgs__Header_definition_c_type
struct detectionH_std_msgs__Header {
 uint32_t seq;
 detectionH_timestamp stamp;
 char *frame_id;
};
#endif /* _detectionH_std_msgs__Header_definition_c_type */


#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_octet_c_type
# define _sequence_octet_c_type
typedef struct sequence_octet {
  uint32_t _maximum, _length;
  uint8_t (*_buffer);
  void (*_release)(void *_buffer);
} sequence_octet;
#endif /* _sequence_octet_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _detectionH_sensor_msgs__Image_c_type
# define _detectionH_sensor_msgs__Image_c_type
typedef struct detectionH_sensor_msgs__Image detectionH_sensor_msgs__Image;
#endif /* _detectionH_sensor_msgs__Image_c_type */

#ifndef _sequence_octet_c_type
# define _sequence_octet_c_type
typedef struct sequence_octet {
  uint32_t _maximum, _length;
  uint8_t (*_buffer);
  void (*_release)(void *_buffer);
} sequence_octet;
#endif /* _sequence_octet_c_type */

#ifndef _detectionH_sensor_msgs__Image_definition_c_type
# define _detectionH_sensor_msgs__Image_definition_c_type
struct detectionH_sensor_msgs__Image {
 detectionH_std_msgs__Header header;
 uint32_t height;
 uint32_t width;
 char *encoding;
 uint8_t is_bigendian;
 uint32_t step;
 sequence_octet data;
};
#endif /* _detectionH_sensor_msgs__Image_definition_c_type */

#include <stdint.h>

#ifndef _calibrationParameters_timestamp_c_type
# define _calibrationParameters_timestamp_c_type
typedef struct calibrationParameters_timestamp calibrationParameters_timestamp;
#endif /* _calibrationParameters_timestamp_c_type */

#ifndef _calibrationParameters_timestamp_definition_c_type
# define _calibrationParameters_timestamp_definition_c_type
struct calibrationParameters_timestamp {
 uint32_t sec;
 uint32_t usec;
};
#endif /* _calibrationParameters_timestamp_definition_c_type */

#include <stdint.h>

#ifndef _calibrationParameters_std_msgs__Header_c_type
# define _calibrationParameters_std_msgs__Header_c_type
typedef struct calibrationParameters_std_msgs__Header calibrationParameters_std_msgs__Header;
#endif /* _calibrationParameters_std_msgs__Header_c_type */

#ifndef _calibrationParameters_std_msgs__Header_definition_c_type
# define _calibrationParameters_std_msgs__Header_definition_c_type
struct calibrationParameters_std_msgs__Header {
 uint32_t seq;
 calibrationParameters_timestamp stamp;
 char *frame_id;
};
#endif /* _calibrationParameters_std_msgs__Header_definition_c_type */


#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_double_c_type
# define _sequence_double_c_type
typedef struct sequence_double {
  uint32_t _maximum, _length;
  double (*_buffer);
  void (*_release)(void *_buffer);
} sequence_double;
#endif /* _sequence_double_c_type */




#include <stdint.h>
#include <stdbool.h>

#ifndef _calibrationParameters_sensor_msgs__RegionOfInterest_c_type
# define _calibrationParameters_sensor_msgs__RegionOfInterest_c_type
typedef struct calibrationParameters_sensor_msgs__RegionOfInterest calibrationParameters_sensor_msgs__RegionOfInterest;
#endif /* _calibrationParameters_sensor_msgs__RegionOfInterest_c_type */

#ifndef _calibrationParameters_sensor_msgs__RegionOfInterest_definition_c_type
# define _calibrationParameters_sensor_msgs__RegionOfInterest_definition_c_type
struct calibrationParameters_sensor_msgs__RegionOfInterest {
 uint32_t x_offset;
 uint32_t y_offset;
 uint32_t height;
 uint32_t width;
 bool do_rectify;
};
#endif /* _calibrationParameters_sensor_msgs__RegionOfInterest_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _calibrationParameters_sensor_msgs__CameraInfo_c_type
# define _calibrationParameters_sensor_msgs__CameraInfo_c_type
typedef struct calibrationParameters_sensor_msgs__CameraInfo calibrationParameters_sensor_msgs__CameraInfo;
#endif /* _calibrationParameters_sensor_msgs__CameraInfo_c_type */

#ifndef _sequence_double_c_type
# define _sequence_double_c_type
typedef struct sequence_double {
  uint32_t _maximum, _length;
  double (*_buffer);
  void (*_release)(void *_buffer);
} sequence_double;
#endif /* _sequence_double_c_type */

#ifndef _calibrationParameters_sensor_msgs__CameraInfo_definition_c_type
# define _calibrationParameters_sensor_msgs__CameraInfo_definition_c_type
struct calibrationParameters_sensor_msgs__CameraInfo {
 calibrationParameters_std_msgs__Header header;
 uint32_t height;
 uint32_t width;
 char *distortion_model;
 sequence_double D;
 double K[9];
 double R[9];
 double P[12];
 uint32_t binning_x;
 uint32_t binning_y;
 calibrationParameters_sensor_msgs__RegionOfInterest roi;
};
#endif /* _calibrationParameters_sensor_msgs__CameraInfo_definition_c_type */


#ifndef _genom_incompatible_digest_client_digest_c_type
# define _genom_incompatible_digest_client_digest_c_type
typedef struct genom_incompatible_digest_client_digest genom_incompatible_digest_client_digest;
#endif /* _genom_incompatible_digest_client_digest_c_type */

#ifndef _genom_incompatible_digest_client_digest_definition_c_type
# define _genom_incompatible_digest_client_digest_definition_c_type
struct genom_incompatible_digest_client_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_client_digest_definition_c_type */


#ifndef _genom_incompatible_digest_server_digest_c_type
# define _genom_incompatible_digest_server_digest_c_type
typedef struct genom_incompatible_digest_server_digest genom_incompatible_digest_server_digest;
#endif /* _genom_incompatible_digest_server_digest_c_type */

#ifndef _genom_incompatible_digest_server_digest_definition_c_type
# define _genom_incompatible_digest_server_digest_definition_c_type
struct genom_incompatible_digest_server_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_server_digest_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_incompatible_digest_c_type
# define _genom_incompatible_digest_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_incompatible_digest_id[] = "::genom::incompatible_digest";
typedef struct genom_incompatible_digest_detail genom_incompatible_digest_detail;
#endif /* _genom_incompatible_digest_c_type */

#ifndef _genom_incompatible_digest_definition_c_type
# define _genom_incompatible_digest_definition_c_type
struct genom_incompatible_digest_detail {
 genom_incompatible_digest_client_digest client;
 genom_incompatible_digest_server_digest server;
};
static inline genom_event
genom_incompatible_digest(genom_incompatible_digest_detail *d, genom_context self) {
 return self->raise(genom_incompatible_digest_id, d, sizeof(*d), self);
}
#endif /* _genom_incompatible_digest_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_bad_transition_c_type
# define _genom_bad_transition_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_bad_transition_id[] = "::genom::bad_transition";
typedef struct genom_bad_transition_detail genom_bad_transition_detail;
#endif /* _genom_bad_transition_c_type */

#ifndef _genom_bad_transition_definition_c_type
# define _genom_bad_transition_definition_c_type
struct genom_bad_transition_detail {
 char from[128];
 char to[128];
};
static inline genom_event
genom_bad_transition(genom_bad_transition_detail *d, genom_context self) {
 return self->raise(genom_bad_transition_id, d, sizeof(*d), self);
}
#endif /* _genom_bad_transition_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_interrupted_c_type
# define _genom_interrupted_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_interrupted_id[] = "::genom::interrupted";
typedef struct genom_interrupted_detail genom_interrupted_detail;
#endif /* _genom_interrupted_c_type */

#ifndef _genom_interrupted_definition_c_type
# define _genom_interrupted_definition_c_type
struct genom_interrupted_detail {
 char by[128];
};
static inline genom_event
genom_interrupted(genom_interrupted_detail *d, genom_context self) {
 return self->raise(genom_interrupted_id, d, sizeof(*d), self);
}
#endif /* _genom_interrupted_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_serialization_c_type
# define _genom_serialization_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_serialization_id[] = "::genom::serialization";
typedef void genom_serialization_detail;
#endif /* _genom_serialization_c_type */

#ifndef _genom_serialization_definition_c_type
# define _genom_serialization_definition_c_type
static inline genom_event
genom_serialization(genom_context self) {
 return self->raise(genom_serialization_id, NULL, 0, self);
}
#endif /* _genom_serialization_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_too_many_activities_c_type
# define _genom_too_many_activities_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_too_many_activities_id[] = "::genom::too_many_activities";
typedef void genom_too_many_activities_detail;
#endif /* _genom_too_many_activities_c_type */

#ifndef _genom_too_many_activities_definition_c_type
# define _genom_too_many_activities_definition_c_type
static inline genom_event
genom_too_many_activities(genom_context self) {
 return self->raise(genom_too_many_activities_id, NULL, 0, self);
}
#endif /* _genom_too_many_activities_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_disallowed_c_type
# define _genom_disallowed_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_disallowed_id[] = "::genom::disallowed";
typedef void genom_disallowed_detail;
#endif /* _genom_disallowed_c_type */

#ifndef _genom_disallowed_definition_c_type
# define _genom_disallowed_definition_c_type
static inline genom_event
genom_disallowed(genom_context self) {
 return self->raise(genom_disallowed_id, NULL, 0, self);
}
#endif /* _genom_disallowed_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_mwerr_c_type
# define _genom_mwerr_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_mwerr_id[] = "::genom::mwerr";
typedef struct genom_mwerr_detail genom_mwerr_detail;
#endif /* _genom_mwerr_c_type */

#ifndef _genom_mwerr_definition_c_type
# define _genom_mwerr_definition_c_type
struct genom_mwerr_detail {
 char what[256];
};
static inline genom_event
genom_mwerr(genom_mwerr_detail *d, genom_context self) {
 return self->raise(genom_mwerr_id, d, sizeof(*d), self);
}
#endif /* _genom_mwerr_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_activity_c_type
# define _genom_no_such_activity_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_activity_id[] = "::genom::no_such_activity";
typedef void genom_no_such_activity_detail;
#endif /* _genom_no_such_activity_c_type */

#ifndef _genom_no_such_activity_definition_c_type
# define _genom_no_such_activity_definition_c_type
static inline genom_event
genom_no_such_activity(genom_context self) {
 return self->raise(genom_no_such_activity_id, NULL, 0, self);
}
#endif /* _genom_no_such_activity_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_inport_c_type
# define _genom_no_such_inport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_inport_id[] = "::genom::no_such_inport";
typedef void genom_no_such_inport_detail;
#endif /* _genom_no_such_inport_c_type */

#ifndef _genom_no_such_inport_definition_c_type
# define _genom_no_such_inport_definition_c_type
static inline genom_event
genom_no_such_inport(genom_context self) {
 return self->raise(genom_no_such_inport_id, NULL, 0, self);
}
#endif /* _genom_no_such_inport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_outport_c_type
# define _genom_no_such_outport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_outport_id[] = "::genom::no_such_outport";
typedef void genom_no_such_outport_detail;
#endif /* _genom_no_such_outport_c_type */

#ifndef _genom_no_such_outport_definition_c_type
# define _genom_no_such_outport_definition_c_type
static inline genom_event
genom_no_such_outport(genom_context self) {
 return self->raise(genom_no_such_outport_id, NULL, 0, self);
}
#endif /* _genom_no_such_outport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_port_io_c_type
# define _genom_port_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_port_io_id[] = "::genom::port_io";
typedef void genom_port_io_detail;
#endif /* _genom_port_io_c_type */

#ifndef _genom_port_io_definition_c_type
# define _genom_port_io_definition_c_type
static inline genom_event
genom_port_io(genom_context self) {
 return self->raise(genom_port_io_id, NULL, 0, self);
}
#endif /* _genom_port_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_remote_c_type
# define _genom_no_such_remote_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_remote_id[] = "::genom::no_such_remote";
typedef void genom_no_such_remote_detail;
#endif /* _genom_no_such_remote_c_type */

#ifndef _genom_no_such_remote_definition_c_type
# define _genom_no_such_remote_definition_c_type
static inline genom_event
genom_no_such_remote(genom_context self) {
 return self->raise(genom_no_such_remote_id, NULL, 0, self);
}
#endif /* _genom_no_such_remote_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_service_c_type
# define _genom_no_such_service_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_service_id[] = "::genom::no_such_service";
typedef void genom_no_such_service_detail;
#endif /* _genom_no_such_service_c_type */

#ifndef _genom_no_such_service_definition_c_type
# define _genom_no_such_service_definition_c_type
static inline genom_event
genom_no_such_service(genom_context self) {
 return self->raise(genom_no_such_service_id, NULL, 0, self);
}
#endif /* _genom_no_such_service_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_remote_io_c_type
# define _genom_remote_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_remote_io_id[] = "::genom::remote_io";
typedef void genom_remote_io_detail;
#endif /* _genom_remote_io_c_type */

#ifndef _genom_remote_io_definition_c_type
# define _genom_remote_io_definition_c_type
static inline genom_event
genom_remote_io(genom_context self) {
 return self->raise(genom_remote_io_id, NULL, 0, self);
}
#endif /* _genom_remote_io_definition_c_type */


#include "genom3/c/context.h"

#ifndef _humandetection_error_videoCap_c_type
# define _humandetection_error_videoCap_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak humandetection_error_videoCap_id[] = "::humandetection::error_videoCap";
typedef void humandetection_error_videoCap_detail;
#endif /* _humandetection_error_videoCap_c_type */

#ifndef _humandetection_error_videoCap_definition_c_type
# define _humandetection_error_videoCap_definition_c_type
static inline genom_event
humandetection_error_videoCap(genom_context self) {
 return self->raise(humandetection_error_videoCap_id, NULL, 0, self);
}
#endif /* _humandetection_error_videoCap_definition_c_type */



/* --- Service input and output structures --------------------------------- */


/* input of abort_activity */
struct genom_humandetection_abort_activity_input {
  uint32_t activity;
};

/* output of abort_activity */
struct genom_humandetection_abort_activity_output {
};


/* input of connect_port */
struct genom_humandetection_connect_port_input {
  char local[128];
  char remote[128];
};

/* output of connect_port */
struct genom_humandetection_connect_port_output {
};


/* input of connect_service */
struct genom_humandetection_connect_service_input {
  char local[128];
  char remote[128];
};

/* output of connect_service */
struct genom_humandetection_connect_service_output {
};


/* input of kill */
struct genom_humandetection_kill_input {
};

/* output of kill */
struct genom_humandetection_kill_output {
};


/* input of RunDetection */
struct genom_humandetection_RunDetection_input {
  uint16_t frameRate;
  uint16_t temporalSlidingWindowSize;
  float detectorFrameRatio;
  uint16_t maxTrackNumber;
  uint16_t maxTemplateSize;
  uint16_t expertThreshold;
  float detectionRescalingFactor;
  float alphaDistribution;
  float histogramUpdateRate;
  uint16_t numberOfParticles;
  uint16_t framesBeforeTrackDeath;
  uint32_t frameHistory;
  char *classifiers;
  float templateMatchingThreshold;
  float disparityThreshold;
};

/* output of RunDetection */
struct genom_humandetection_RunDetection_output {
};


/* input of ChangeClassifier */
struct genom_humandetection_ChangeClassifier_input {
  uint16_t classifier;
};

/* output of ChangeClassifier */
struct genom_humandetection_ChangeClassifier_output {
};



#ifdef __cplusplus
extern "C" {
#endif

/* --- Services ------------------------------------------------------------ */

genom_client		genom_humandetection_client_init(int argc, char *argv[],
                                genom_event *ex, const void **exdetail);
void			genom_humandetection_client_fini(genom_client h);
genom_context		genom_humandetection_client_context(genom_client h);
const char *		genom_humandetection_client_instance(genom_client h);
int			genom_humandetection_client_eventfd(genom_client h);
const struct genom_service_info *
			genom_humandetection_client_service_info(genom_client h,
				int rqstid);
int			genom_humandetection_client_done(genom_client h, int rqstid);
genom_event		genom_humandetection_client_wait(genom_client h, int rqstid);
genom_event		genom_humandetection_client_clean(genom_client h,
				int rqstid);
genom_event		genom_humandetection_client_abort(genom_client h,
                                int rqstid);
genom_event		genom_humandetection_client_doevents(genom_client h);
char *			genom_humandetection_client_json_error(genom_client h,
				genom_event e, const void *detail);

/* abort_activity */
typedef void (*humandetection_abort_activity_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_abort_activity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_abort_activity_rqst(
  genom_client h,
  const struct genom_humandetection_abort_activity_input *in,
  humandetection_abort_activity_cb sentcb, humandetection_abort_activity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_abort_activity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_abort_activity_output **out,
  void **exdetail);

void	genom_humandetection_client_abort_activity_init_input(
  struct genom_humandetection_abort_activity_input *input);
void	genom_humandetection_client_abort_activity_init_output(
  struct genom_humandetection_abort_activity_output *output);
void	genom_humandetection_client_abort_activity_fini_input(
  struct genom_humandetection_abort_activity_input *input);
void	genom_humandetection_client_abort_activity_fini_output(
  struct genom_humandetection_abort_activity_output *output);

int	genom_humandetection_client_abort_activity_json_scan(
  struct genom_humandetection_abort_activity_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_abort_activity_json_print(
  char **json, const struct genom_humandetection_abort_activity_output *out);

/* connect_port */
typedef void (*humandetection_connect_port_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_connect_port_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_connect_port_rqst(
  genom_client h,
  const struct genom_humandetection_connect_port_input *in,
  humandetection_connect_port_cb sentcb, humandetection_connect_port_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_connect_port_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_connect_port_output **out,
  void **exdetail);

void	genom_humandetection_client_connect_port_init_input(
  struct genom_humandetection_connect_port_input *input);
void	genom_humandetection_client_connect_port_init_output(
  struct genom_humandetection_connect_port_output *output);
void	genom_humandetection_client_connect_port_fini_input(
  struct genom_humandetection_connect_port_input *input);
void	genom_humandetection_client_connect_port_fini_output(
  struct genom_humandetection_connect_port_output *output);

int	genom_humandetection_client_connect_port_json_scan(
  struct genom_humandetection_connect_port_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_connect_port_json_print(
  char **json, const struct genom_humandetection_connect_port_output *out);

/* connect_service */
typedef void (*humandetection_connect_service_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_connect_service_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_connect_service_rqst(
  genom_client h,
  const struct genom_humandetection_connect_service_input *in,
  humandetection_connect_service_cb sentcb, humandetection_connect_service_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_connect_service_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_connect_service_output **out,
  void **exdetail);

void	genom_humandetection_client_connect_service_init_input(
  struct genom_humandetection_connect_service_input *input);
void	genom_humandetection_client_connect_service_init_output(
  struct genom_humandetection_connect_service_output *output);
void	genom_humandetection_client_connect_service_fini_input(
  struct genom_humandetection_connect_service_input *input);
void	genom_humandetection_client_connect_service_fini_output(
  struct genom_humandetection_connect_service_output *output);

int	genom_humandetection_client_connect_service_json_scan(
  struct genom_humandetection_connect_service_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_connect_service_json_print(
  char **json, const struct genom_humandetection_connect_service_output *out);

/* kill */
typedef void (*humandetection_kill_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_kill_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_kill_rqst(
  genom_client h,
  const struct genom_humandetection_kill_input *in,
  humandetection_kill_cb sentcb, humandetection_kill_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_kill_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_kill_output **out,
  void **exdetail);

void	genom_humandetection_client_kill_init_input(
  struct genom_humandetection_kill_input *input);
void	genom_humandetection_client_kill_init_output(
  struct genom_humandetection_kill_output *output);
void	genom_humandetection_client_kill_fini_input(
  struct genom_humandetection_kill_input *input);
void	genom_humandetection_client_kill_fini_output(
  struct genom_humandetection_kill_output *output);

int	genom_humandetection_client_kill_json_scan(
  struct genom_humandetection_kill_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_kill_json_print(
  char **json, const struct genom_humandetection_kill_output *out);

/* RunDetection */
typedef void (*humandetection_RunDetection_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_RunDetection_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_RunDetection_rqst(
  genom_client h,
  const struct genom_humandetection_RunDetection_input *in,
  humandetection_RunDetection_cb sentcb, humandetection_RunDetection_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_RunDetection_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_RunDetection_output **out,
  void **exdetail);

void	genom_humandetection_client_RunDetection_init_input(
  struct genom_humandetection_RunDetection_input *input);
void	genom_humandetection_client_RunDetection_init_output(
  struct genom_humandetection_RunDetection_output *output);
void	genom_humandetection_client_RunDetection_fini_input(
  struct genom_humandetection_RunDetection_input *input);
void	genom_humandetection_client_RunDetection_fini_output(
  struct genom_humandetection_RunDetection_output *output);

int	genom_humandetection_client_RunDetection_json_scan(
  struct genom_humandetection_RunDetection_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_RunDetection_json_print(
  char **json, const struct genom_humandetection_RunDetection_output *out);

/* ChangeClassifier */
typedef void (*humandetection_ChangeClassifier_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_humandetection_ChangeClassifier_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_humandetection_client_ChangeClassifier_rqst(
  genom_client h,
  const struct genom_humandetection_ChangeClassifier_input *in,
  humandetection_ChangeClassifier_cb sentcb, humandetection_ChangeClassifier_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_humandetection_client_ChangeClassifier_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_humandetection_ChangeClassifier_output **out,
  void **exdetail);

void	genom_humandetection_client_ChangeClassifier_init_input(
  struct genom_humandetection_ChangeClassifier_input *input);
void	genom_humandetection_client_ChangeClassifier_init_output(
  struct genom_humandetection_ChangeClassifier_output *output);
void	genom_humandetection_client_ChangeClassifier_fini_input(
  struct genom_humandetection_ChangeClassifier_input *input);
void	genom_humandetection_client_ChangeClassifier_fini_output(
  struct genom_humandetection_ChangeClassifier_output *output);

int	genom_humandetection_client_ChangeClassifier_json_scan(
  struct genom_humandetection_ChangeClassifier_input *in,
  const char *json, char **endptr);
int	genom_humandetection_client_ChangeClassifier_json_print(
  char **json, const struct genom_humandetection_ChangeClassifier_output *out);



/* --- Ports --------------------------------------------------------------- */

/* genom_state */
#line 78 "/home/ariel/openrobots/share/genom/templates/common/genom.gen"
genom_event genom_humandetection_client_genom_state_port(
  genom_client h,
  genom_state_component *data);

/* Humans */
#line 54 "/home/ariel/Documents/LAAS/twoears/repositories/humandetection/humandetection.gen"
genom_event genom_humandetection_client_Humans_port(
  genom_client h,
  detectionH_Detections *data);

/* Classifiers */
#line 55 "/home/ariel/Documents/LAAS/twoears/repositories/humandetection/humandetection.gen"
genom_event genom_humandetection_client_Classifiers_port(
  genom_client h,
  humandetection_ClassifiersLoaded *data);


void	genom_humandetection_client_genom_state_init_data(
  genom_state_component *data);
void	genom_humandetection_client_genom_state_fini_data(
  genom_state_component *data);
int	genom_humandetection_client_genom_state_json_print(char **json,
  const genom_state_component *data);

void	genom_humandetection_client_Humans_init_data(
  detectionH_Detections *data);
void	genom_humandetection_client_Humans_fini_data(
  detectionH_Detections *data);
int	genom_humandetection_client_Humans_json_print(char **json,
  const detectionH_Detections *data);

void	genom_humandetection_client_Classifiers_init_data(
  humandetection_ClassifiersLoaded *data);
void	genom_humandetection_client_Classifiers_fini_data(
  humandetection_ClassifiersLoaded *data);
int	genom_humandetection_client_Classifiers_json_print(char **json,
  const humandetection_ClassifiersLoaded *data);




/* --- Data ---------------------------------------------------------------- */

extern const struct genom_client_info genom_humandetection_client_info;

extern const struct genom_service_info *
			genom_humandetection_client_abort_activity_info;
extern const struct genom_service_info *
			genom_humandetection_client_connect_port_info;
extern const struct genom_service_info *
			genom_humandetection_client_connect_service_info;
extern const struct genom_service_info *
			genom_humandetection_client_kill_info;
extern const struct genom_service_info *
			genom_humandetection_client_RunDetection_info;
extern const struct genom_service_info *
			genom_humandetection_client_ChangeClassifier_info;

extern const struct genom_port_info *
			genom_humandetection_client_genom_state_info;
extern const struct genom_port_info *
			genom_humandetection_client_Humans_info;
extern const struct genom_port_info *
			genom_humandetection_client_Classifiers_info;

#ifdef __cplusplus
}
#endif

#endif /* H_HUMANDETECTION_CLIENT */
