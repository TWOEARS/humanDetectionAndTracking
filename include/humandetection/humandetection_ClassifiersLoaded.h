// Generated by gencpp from file humandetection/humandetection_ClassifiersLoaded.msg
// DO NOT EDIT!


#ifndef HUMANDETECTION_MESSAGE_HUMANDETECTION_CLASSIFIERSLOADED_H
#define HUMANDETECTION_MESSAGE_HUMANDETECTION_CLASSIFIERSLOADED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humandetection
{
template <class ContainerAllocator>
struct humandetection_ClassifiersLoaded_
{
  typedef humandetection_ClassifiersLoaded_<ContainerAllocator> Type;

  humandetection_ClassifiersLoaded_()
    : classifiers()
    , loaded(0)  {
    }
  humandetection_ClassifiersLoaded_(const ContainerAllocator& _alloc)
    : classifiers(_alloc)
    , loaded(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _classifiers_type;
  _classifiers_type classifiers;

   typedef uint32_t _loaded_type;
  _loaded_type loaded;




  typedef boost::shared_ptr< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> const> ConstPtr;

}; // struct humandetection_ClassifiersLoaded_

typedef ::humandetection::humandetection_ClassifiersLoaded_<std::allocator<void> > humandetection_ClassifiersLoaded;

typedef boost::shared_ptr< ::humandetection::humandetection_ClassifiersLoaded > humandetection_ClassifiersLoadedPtr;
typedef boost::shared_ptr< ::humandetection::humandetection_ClassifiersLoaded const> humandetection_ClassifiersLoadedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace humandetection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/msg', '/opt/ros/indigo/share/sensor_msgs/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/msg'], 'humandetection': ['humandetection/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06bf57631c7d0a151097b3f4c25538ae";
  }

  static const char* value(const ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06bf57631c7d0a15ULL;
  static const uint64_t static_value2 = 0x1097b3f4c25538aeULL;
};

template<class ContainerAllocator>
struct DataType< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humandetection/humandetection_ClassifiersLoaded";
  }

  static const char* value(const ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IDL struct ::humandetection::ClassifiersLoaded\n\
string[] classifiers\n\
uint32 loaded\n\
";
  }

  static const char* value(const ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classifiers);
      stream.next(m.loaded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct humandetection_ClassifiersLoaded_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humandetection::humandetection_ClassifiersLoaded_<ContainerAllocator>& v)
  {
    s << indent << "classifiers[]" << std::endl;
    for (size_t i = 0; i < v.classifiers.size(); ++i)
    {
      s << indent << "  classifiers[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.classifiers[i]);
    }
    s << indent << "loaded: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.loaded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANDETECTION_MESSAGE_HUMANDETECTION_CLASSIFIERSLOADED_H
